---
title: "austin_TCAD_parse"
output: html_document
date: "2025-01-27"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
library(reticulate)
reticulate::virtualenv_list()
reticulate::virtualenv_create('r-reticulate', packages = c('numpy',
                                                         'pandas',
                                                         'ijson'),
                              force = FALSE)
```

```{python}
import pandas as pd
import numpy as np
import urllib
import zipfile
import re
import ijson
import multiprocessing
from multiprocessing import Pool
situs_year = list()
situs_pID = list()
situs_streetNum = list()
situs_streetPrefix = list()
situs_streetName = list()
situs_streetSuffix = list()
situs_city = list()
situs_state = list()
situs_zip = list()
situs_country = list()
situs_international = list()
owner_year = list()
owner_ID = list()
owner_name = list()
owner_nameSecondary = list()
owner_addrDeliveryLine = list()
owner_addrUnitDesignator = list()
owner_addrCity = list()
owner_addrZip = list()
owner_addrState = list()
owner_addrCountry = list()
owner_addrInternational = list()
owner_ownerPct = list()
owner_exemptions = list()
owner_pID = list()
propertyChar_year =list()

propertyChar_marketArea = list()
propertyChar_region = list()
propertyChar_zoning = list()
propertyChar_pID = list()

pID_list = list()
year_list = list()
situs_coord = list()

deeds_deedDt=list()
deeds_pID=list()
deeds_deedID=list()
deeds_sellerLine=list()
deeds_buyerline=list()
deeds_deedDt=list()
deeds_year = list()

propertyProf_year = list()
propertyProf_pID = list()
propertyProf_AirHeat = list()

propertyProf_imprvStateCd = list()
propertyProf_imprvTotalArea = list()
propertyProf_landStateCd = list()
propertyProf_landTotalLots = list()
propertyProf_landTotalSqft = list()
propertyProf_imprvStories = list()
propertyProf_imprvUnits = list()
propertyProf_imprvActualYearBuilt = list()
propertyProf_imprvEffYearBuilt = list()
propertyProf_fieldInsDt = list()
propertyProf_landHomesitePct = list()
propertyProf_mobileHomeNumbers = list()
```


```{python}

def propChar_add(key, value):
  if(key=='pID'):
    if(value is None):
      propertyChar_pID.append('NA')
    else:
      propertyChar_pID.append(value)
              
  if(key=='marketArea'):
    if(value == None):
      propertyChar_marketArea.append('NA')  
              
    else:
      propertyChar_marketArea.append(value)
            
  if(key=='region'):
    if(value is None):
      propertyChar_region.append('NA')
    else:
      propertyChar_region.append(value)
            
  if(key=='zoning'):
    if(value is None):
      propertyChar_zoning.append('NA')
    else:
              
      propertyChar_zoning.append(value)
  


def propProf_add(key,value):
  if(key=='pID'):
    if(value is None):
      propertyProf_pID.append('NA')
    else:
      propertyProf_pID.append(value)
  if(key=='centralAirHeat'):
    if(value is None):
      propertyProf_AirHeat.append('NA')
    else:
      propertyProf_AirHeat.append(value)
  if(key=='imprvStateCd'):
    if(value is None):
      propertyProf_imprvStateCd.append('NA')
    else:
      propertyProf_imprvStateCd.append(value)

  if(key=='imprvTotalArea'):
    if(value is None):
      propertyProf_imprvTotalArea.append('NA')
    else:
      propertyProf_imprvTotalArea.append(value)

  if(key=='imprvStories'):
    if(value is None):
      propertyProf_imprvStories.append('NA')
    else:
      propertyProf_imprvStories.append(value)
  if(key=='imprvUnits'):
    if(value is None):
      propertyProf_imprvUnits.append('NA')
    else:
      propertyProf_imprvUnits.append(value)
  if(key=='imprvActualYearBuilt'):
    if(value is None):
      propertyProf_imprvActualYearBuilt.append('NA')
    else:
      propertyProf_imprvActualYearBuilt.append(value)
  if(key=='imprvEffYearBuilt'):
    if(value is None):
      propertyProf_imprvEffYearBuilt.append('NA')
    else:
      propertyProf_imprvEffYearBuilt.append(value)
  if(key=='landHomesitePct'):
    if(value is None):
      propertyProf_landHomesitePct.append('NA')
    else:
      propertyProf_landHomesitePct.append(value)
  if(key=='landStateCd'):
    if(value is None):
      propertyProf_landStateCd.append('NA')
    else:
      propertyProf_landStateCd.append(value)
  if(key=='landTotalLots'):
    if(value is None):
      propertyProf_landTotalLots.append('NA')
    else:
      propertyProf_landTotalLots.append(value)
  if(key=='landTotalSqft'):
    if(value is None):
      propertyProf_landTotalSqft.append('NA')
    else:
      propertyProf_landTotalSqft.append(value)

  if(key=='mobileHomeNumbers'):
    if(value is None):
      propertyProf_mobileHomeNumbers.append('NA')
    else:
      propertyProf_mobileHomeNumbers.append(value)
  
  
def situsChar_add(key,value):
  if(key=='pID'):
    if(value is None):
      situs_pID.append('NA')  
    else:
      situs_pID.append(value)
  if(key=='streetNum'):
    if(value is None):
      situs_streetNum.append('NA')
    else:
      situs_streetNum.append(value)
  if(key=='streetPrefix'):
    if(value is None):
      situs_streetPrefix.append('NA')
    else:
      situs_streetPrefix.append(value)
  if(key=='streetName'):
    if(value is None):
      situs_streetName.append('NA')
    else:
      situs_streetName.append(value)
  if(key=='streetSuffix'):
    if(value is None):
      situs_streetSuffix.append('NA')
    else:
      situs_streetSuffix.append(value)
  if(key=='city'):
    if(value is None):
      situs_city.append('NA')
    else:
      situs_city.append(value)
  if(key=='state'):
    if(value is None):
      situs_state.append('NA')
    else:
      situs_state.append(value)
  if(key=='zip'):
    if(value is None):
      situs_zip.append('NA')
    else:
      situs_zip.append(value)
  if(key=='country'):
    if(value is None):
      situs_country.append('NA')
    else:
      situs_country.append(value)
  if(key=='international'):
    if(value is None):
      situs_international.append('NA')
    else:
      situs_international.append(value)
    
   
def ownerChar_add(key,value):
  if(key=='ownerID'):
    if(value is None):
      owner_ID.append('NA')
    else:
      owner_ID.append(value)
  if(key=='pID'):
    if(value is None):
      owner_pID.append('NA')
    else:
      owner_pID.append(value)
  if(key=='ownerPct'):
    if(value is None):
      owner_ownerPct.append('NA')
    else:
      owner_ownerPct.append(value)
  if(key=='name'):
    if(value is None):
      owner_name.append('NA')
    else:
      owner_name.append(value)
  if(key=='nameSecondary'):
    if(value is None):
      owner_nameSecondary.append('NA')
    else:
      owner_nameSecondary.append(value)
  if(key=='addrDeliveryLine'):
    if(value is None):
      owner_addrDeliveryLine.append('NA')
    else:
      owner_addrDeliveryLine.append(value)
  if(key=='addrUnitDesignator'):
    if(value is None):
      owner_addrUnitDesignator.append('NA')
    else:
      owner_addrUnitDesignator.append(value)
  if(key=='addrCity'):
    if(value is None):
      owner_addrCity.append('NA')
    else:
      owner_addrCity.append(value)
  if(key=='addrZip'):
    if(value is None):
      owner_addrZip.append('NA')
    else:
      owner_addrZip.append(value)
  if(key=='addrState'):
    if(value is None):
      owner_addrState.append('NA')
    else:
      owner_addrState.append(value)
  if(key=='addrCountry'):
    if(value is None):
      owner_addrCountry.append('NA')
    else:
      owner_addrCountry.append(value)
  if(key=='addrInternational'):
    if(value is None):
      owner_addrInternational.append('NA')
    else:
      owner_addrInternational.append(value)
  if(key=='exemptions'):
    if(value is None):
      owner_exemptions.append('NA')
    else:
      owner_exemptions.append(value)
  

def deedChar_add(key,value):
  if(key=='pID'):
    if(value is None):
      deeds_pID.append('NA')
    else:
      deeds_pID.append(value)
  if(key=='buyerLine'):
    if(value is None):
      deeds_buyerline.append('NA')
    else:
      deeds_buyerline.append(value)
  if(key=='sellerLine'):
    if(value is None):
      deeds_sellerLine.append('NA')
    else:
      deeds_sellerLine.append(value)
  if(key=='deedDt'):
    if(value is None):
      deeds_deedDt.append('NA')
    else:
      deeds_deedDt.append(value)
  if(key=='deedID'):
    if(value is None):
      deeds_deedID.append('NA')
    else:
      deeds_deedID.append(value)
          



      
print((multiprocessing.cpu_count()-1)//2)

```





```{python}
from functools import partial
for year in range(2024,2025):

  print(year)
  year_used = year
  TCAD_special_export_file_name = str(year_used)+'_Special_export.zip'
  base_path = "tcad_data//"
  
  with zipfile.ZipFile(base_path+TCAD_special_export_file_name,'r') as austin_parcel_data_zip:
    parcel_file_name = austin_parcel_data_zip.namelist()[0]
    print('profile')
    with austin_parcel_data_zip.open(parcel_file_name) as austin_parcel_data:
      parser = ijson.parse(austin_parcel_data)
      propProf = ijson.kvitems(parser, 'item.propertyProfile.item')
      propProfLen = len(tuple(propProf))//13
      for key, value in propProf:
        propProf_add(key,value)
  with zipfile.ZipFile(base_path+TCAD_special_export_file_name,'r') as austin_parcel_data_zip:
    parcel_file_name = austin_parcel_data_zip.namelist()[0]
    print('propChar')
    with austin_parcel_data_zip.open(parcel_file_name) as austin_parcel_data:
      parser = ijson.parse(austin_parcel_data)
      propChar = ijson.kvitems(parser, 'item.propertyCharacteristics.item')
      propCharLen = len(tuple(propChar))//3
      for key, value in propProf:
        propProf_add(key,value)

  with zipfile.ZipFile(base_path+TCAD_special_export_file_name,'r') as austin_parcel_data_zip:
    parcel_file_name = austin_parcel_data_zip.namelist()[0]
    print('situs')
    with austin_parcel_data_zip.open(parcel_file_name) as austin_parcel_data:
      parser = ijson.parse(austin_parcel_data)
      situsChars = ijson.kvitems(parser, 'item.situses.item')
      situsCharsLen = len(tuple(situsChars))//10
      for key, value in situsChars:
        situsChar_add(key, value)
  with zipfile.ZipFile(base_path+TCAD_special_export_file_name,'r') as austin_parcel_data_zip:
    parcel_file_name = austin_parcel_data_zip.namelist()[0]
    print('owner')
    with austin_parcel_data_zip.open(parcel_file_name) as austin_parcel_data:
      parser = ijson.parse(austin_parcel_data)
      ownerChars = ijson.kvitems(parser, 'item.owners.item')
      ownerCharsLen = len(tuple(ownerChars))//13
      for key, value in ownerChars:
        ownerChar_add(key, value)
  

  owner_year.append(np.repeat(str(year),ownerCharsLen,axis=0))
  situs_year.append(np.repeat(str(year),situsCharsLen,axis=0))
  propertyProf_year.append(np.repeat(str(year),propProfLen,axis=0))
  propertyChar_year.append(np.repeat(str(year),propCharLen,axis=0))

```



```{r}

propertyChar_data = pd.DataFrame({'propertyChar_year':propertyChar_year,
                                  'propertyChar_pID':propertyChar_pID,
                                  'propertyChar_marketArea': propertyChar_marketArea,
                              'propertyChar_region': propertyChar_region,
                              'propertyChar_zoning': propertyChar_zoning})

propertyChar_data.to_csv('austin_propertyChar_data.csv')


propertyProf_data = pd.DataFrame({'propertyProf_year':propertyProf_year,
                                  'propertyProf_pID':propertyProf_pID,
                                  'propertyProf_AirHeat': propertyProf_AirHeat,
                              'propertyProf_imprvStateCd': propertyProf_imprvStateCd,
                              'propertyProf_imprvTotalArea': propertyProf_imprvTotalArea,
                              'propertyProf_landStateCd':propertyProf_landStateCd,
                              'propertyProf_landTotalLots':propertyProf_landTotalLots,
                              'propertyProf_landTotalSqft':propertyProf_landTotalSqft,
                              'propertyProf_imprvStories':propertyProf_imprvStories,
                              'propertyProf_imprvUnits':propertyProf_imprvUnits,
                              'propertyProf_imprvActualYearBuilt':propertyProf_imprvActualYearBuilt,
                              'propertyProf_imprvEffYearBuilt':propertyProf_imprvEffYearBuilt,
                              'propertyProf_landHomesitePct':propertyProf_landHomesitePct,
                              'propertyProf_mobileHomeNumbers':propertyProf_mobileHomeNumbers})

propertyProf_data.to_csv('austin_propertyProf_data.csv')
```



```{python}
situs_data =     pd.DataFrame({'situs_year':situs_year,
                              'situs_pID': situs_pID,
                              'situs_streetNum': situs_streetNum,
                              'situs_streetPrefix': situs_streetPrefix,
                              'situs_streetName': situs_streetName,
                              'situs_streetSuffix': situs_streetSuffix,
                              'situs_city': situs_city,
                              'situs_state': situs_state,
                              'situs_zip': situs_zip,
                              'situs_country': situs_country,
                              'situs_international': situs_international})
    
situs_data.to_csv('austin_situs_data.csv')
                              
owner_data =  pd.DataFrame({'owner_year':owner_year,
                          'owner_ID': owner_ID,
                              'owner_pID': owner_pID,
                              'owner_name': owner_name,
                              'owner_nameSecondary': owner_nameSecondary,
                              'owner_addrDeliveryLine': owner_addrDeliveryLine,
                              'owner_addrUnitDesignator': owner_addrUnitDesignator,
                              'owner_addrCity': owner_addrCity,
                              'owner_addrZip': owner_addrZip,
                              'owner_addrState': owner_addrState,
                              'owner_addrCountry': owner_addrCountry,
                              'owner_addrInternational': owner_addrInternational
                              }
                              )
                          
owner_data.to_csv('austin_owner_data.csv')


```


# with Pool((multiprocessing.cpu_count())//2) as p:
      #   p.imap(propProf_add, propProf, chunksize = 500)
      #   p.close()
      #   p.join()

```{python}


# download.file('https://traviscad.org//wp-content/largefiles/2024%20Special%20export%20Supp%205%2011072024.zip', destfile = getwd())
# tcad_parcel_data <- jsonlite::read_json(file('Travis-protaxExport-20241107.json'))
# tcad_parcel_data <- arrow::open_dataset('Travis-protaxExport-20241107.json',
#                                         delimiter = ',',
#                                         format = 'json')



```

pID
geometry
```{r}
base_path = "D://austin_parcel_analysis//tcad_data//"
TCAD_special_export_file_name = paste(2012,
                                      '_Special_export.zip',sep='')
# readLines('tacd_data//2012_Special_export.zip', n=1000)
tail(readLines(unz(paste(base_path,
                    TCAD_special_export_file_name,
                    sep = '//'),
              "Travis-protaxExport-20250311.json"), n=2000),1000)
 # read.table(unz("Sales.zip", "Sales.dat"), nrows=10, 
# read.table("Sales.zip", nrows=10, header=T, quote="\"", sep=",")


# read_csv("foo.txt.gz")
```
